给你一个整数 n ，表示一张 无向图 中有 n 个节点，编号为 0 到 n - 1 。同时给你一个二维整数数组 edges ，其中 edges[i] = [ai, bi] 表示节点 ai 和 bi 之间有一条 无向 边。

请你返回 无法互相到达 的不同 点对数目 。
--------------------------------------------------------------------------------------------------------------------
通过深度优先搜索的方式，找出每一个连通分量中的节点个数 t，然后将当前连通分量中的节点个数 t 与之前所有连通分量中的节点个数 s 相乘，即可得到当前连通分量中的不可达点对数目 s*t，
然后将 t加到s中。继续搜索下一个连通分量，直到搜索完所有连通分量，即可得到答案。

class Solution {
public:
    long long countPairs(int n, vector<vector<int>>& edges) {
        long long ans = 0, s = 0;
        vector<vector<int>> Adjacency_matrix(n);
        for(auto &e : edges){
            int x = e[0], y = e[1];
            Adjacency_matrix[x].emplace_back(y);
            Adjacency_matrix[y].emplace_back(x);
        }
        //DFS
        bool vis[n];
        memset(vis, 0, sizeof(vis));
        function<int(int)> dfs = [&](int i) {
            if (vis[i]) {
                return 0;
            }
            vis[i] = true;
            int cnt = 1;
            for (int j : Adjacency_matrix[i]) {
                cnt += dfs(j);
            }
            return cnt;
        };
        for(int i = 0; i < n; ++i){
            int t = dfs(i);
            ans += s * t;
            s += t;
        }

        return ans;
    }
};
 
